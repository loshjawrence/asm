in msvc you must rclick project go to build deps and check masm
when you make an .asm file is you `add item`->`cpp file`-> but name it .asm

/**************************************
 * ep2 registers
 *************************************/
8086 registers:
    * Naming similar to x86 x64 registers)
    * 8086 was a 16 bit cpu.

//////////////////////////////////////
General purpose regs: ax bx cx and dx.
each of these also had 2 8 bit versions of the register
fox example ax had ah and al (i.e. hi and low)
* if you want to change bx the compiler expects that it is back to the orig value before you function leaves
* so you must push rbx at the top and pop rbx at the bottom before ret
/////////////////////////////////////

/////////////////////////////////////
index regs: si di bp and sp
source , dest , base pointer, and stack pointer
/////////////////////////////////////

/////////////////////////////////////
instruction pointer: ip
/////////////////////////////////////

/////////////////////////////////////
segment registers: cs ds es and ss
memory was segmented back then and these were used for that paradigm.
not really used.
/////////////////////////////////////

/////////////////////////////////////
flags register: flags
stores the state of comparisons, carry, etc
/////////////////////////////////////

/**************************************
 * ep3 x86 x64 registers
 *************************************/
 Naming conventions of above are extended to 32 bit registers
 It is the same name but with an e prefix. the older registers are just
 the lsb portions of register
 x64 registers are again the same register names as the 16bit versions but with an r prefix for the full 64 bits.
 x64 also adds access to the lowest byte in the other registers to make things consistant.
 so for the old 8086 registers they all have a L suffix to access the lowest byte
 so al, bl, cl, dl, sil, dil, spl, bpl.
 the new x64 registers R8-R15 have 32 16 and 8 bit aliases
 the 32 alias end with d(double word or dword) the 16 bit end with w(word) and the 8 bit end with b(byte)
 the ip register has only EIP(32 bit) and RIP(64 bit) alias
 the flags register has rflags, eflags and flags for 64, 32, 16 bit aliases

so all in all it should look like:
a,b,c, and d also have the old 8086 way of accessing the upper bits of the 16 bit section
i.e. ah, bh, ch, dh
|RAX            |EAX      |AX  |AL  |
|RBX            |EBX      |BX  |BL  |
|RCX            |ECX      |CX  |CL  |
|RDX            |EDX      |DX  |DL  |
|RSI            |ESI      |SI  |SIL |
|RDI            |EDI      |DI  |DIL |
|RSP            |ESP      |SP  |SPL |
|RBP            |EBP      |BP  |BPL |
|RIP            |EIP                |
|R8             |R8D      |R8W |R8B |
|R9             |R9D      |R9W |R9B |
|R10            |R10D     |R10W|R10B|
|R11            |R11D     |R11W|R11B|
|R12            |R12D     |R12W|R12B|
|R13            |R13D     |R13W|R13B|
|R14            |R14D     |R14W|R14B|
|R15            |R15D     |R15W|R15B|
|RFlags         |EFlags             |

NOTE: using 32bit regs with 32bit instructions (on x64 hw) zeros the top 32 bits of the register.
however the 16 and 8 bit instructions do not zero the upper msb's

/**************************************
 * ep4 Fundamental data types
 *************************************/
 integers: byte, word, dword, qword
 floating point: real4, real8, real10
 simd pointers: xmmword, ymmword, zmmword

signed and unsigned comes down to which instructions you use.
its really up to the programmer to keep track of what data is intended to be signed
example: unsigned: div and mul, signed: idiv  and imul
for other instructions like add and sub theres no difference
 x86 is designed to use 2s comp when doing signed arith
to get the pos version of a signed number, flip the bits and add 1

===============
Floating point
real4: 32 bits: 1 sign, 8 exp, 23 mantissa
real8: 64 bits: 1 sign, 11 exp, 52 mantissa
real10: 80 bits: 1 sign, 15 exp, 64 bit mantissa.
===============

/**************************************
 * ep5 mov and lea(load effective addr)
 *************************************/
mov supports an imm64
 mov dst, src
 for move the src can be an immediate or a register
 but dst and src must be the same size. both cannot be "memory" i.e. a .data segment variable
 dst must be memory or a reg

 can use mov as a multibyte nop (nop is only 1 byte instruction)
 mov rax, rax is a 3 byte nop
 mov al, al is a 2 byte nop

lea is acutally an arith instr, it computes an SIB addr
lea does not change any flags.
in the .data section your variables are actually pointers to ram addresses
so to move the ram address it points to to a reg
you can't use mov since it move the data stored at the address.
you need lea to move the ram address to a reg.
once the ram address is in a reg you can move data to that address indirectly
see moveToRAMAddr in asm.asm

/**************************************
 * ep6 basic arith instr (add sub inc dec)
 *************************************/
signed carry is on overflow flag, unsiged carry is on carry flag

flags they affect: overflow carry sign zero, aux carry, parity
LOCK is supported
The 32 bit versions of add generates more efficient machine code than 64 bit.
64bit versions add an rex prefix in machine code.
can use 'add reg, 0' to update the flags according to reg without changing its value
similar to `and reg, reg` and `or reg, reg`.

`cmp reg, reg` sets the same flags as `sub reg, reg` since that's essentially what it's doing

`add reg, 1` if you need `inc reg` but also need the carry flag.

add is faster than mul. if you need to double a reg use `add reg, reg`. usually you would use shifts.

There is no `add reg64 imm64`. if the reg is 64bits then the immediate sign is extended

for sub, overflow flag is for signed borrow and carry flag is unsigned borrow.
flags: same as add

sub sign extends imm32s, if you need to subtract a imm64 you need to use mov first.

quick way to zero is `sub reg, reg` but `xor reg, reg` is used for this purpose.
can use add and sub to perform a swap, similar to xor swap, but just use xchg since faster and easier to read.

dec, like inc, doesnt set carry flag but it will set the zero flag. useful for loops if you want to know if they wrapped around
on their counter but leave the carry flags for the arith in the loop block.

/**************************************
 * ep7 bool (and or not xor)
 *************************************/
 to mark a number as binary in stick a b on the end
 01001111b
 xor is similar to asking which bits are not equal or where do i have an odd number of bits
 xnor is similar to asking which bits are equal or where do i have an even number of bits
 for xnor simply not the result of xor.

 or is similar to asking where are there 1's
 nor is similar to asking where do i have only 0's
 for nor simply not the result of or.

 and is similar to asking where are there only 1's
 nand is simliar to asking where are there not only 1's
 for nand simply not the result of and.

 nand and nor are universal gates, can make anything out of them.

 if you want to check if a reg is 0 do `and reg, reg` then check the zero flag


/**************************************
 * ep8 shift rotate and bit manip
 *************************************/
shl, shr, sal, sar, rol, ror, rcl, rcr, shld, shrd

shl is shift left
shr is shift right
the carry flag holds the bit that was shifted out
if the immediate is 1 the the overflow flag is set if the sign changed
can shift by a variable amount but only if using cl:
mov cl, 5
shl edx, cl
if you want to mul or div by a pow2 then you can use shifts but the value in the reg must be unsigned

but..
sal sar are arith shifts which preserve the sign bit and prevents the shifts from stepping on it.
sar with shift the sign bit into spots on the right of the sign bit to keep the math correcct.
shl and sal are the same instruction, i.e. the same behavior, also the same byte code if looking at the disassembly

rotates have similar special behavior to shifts (variable use of cl) and when imm is 1 the overflow flags are used

rcl rcr are "rotate through the carry flag" instructions, so it uses teh carry flag as an extra msb bit for the register
shld shlr are double precision shifts. its a 3 opperand instruction example:
shrd rax, rbx, 12
rax is the msb portion and rbx is the lsb portion and the whole thing is shifted right by 12 and the msb portion of the result
is saved in rax. rbx is unchanged after the instruction.

/**************************************
 * ep9 flags pushfq popfq pushf, popf
 *************************************/
flags register:
  15 | 14 | 13 | 12 | 11 | 10 |  09 | 08 | 07 | 06 | 05 | 04 | 03 | 02 | 01 | 00 |
     | NT |   IOPL  | OF | DF |  IF | TF | SF | ZF |    | AF |    | PF |    | CF |
NOTE: not all instr set the various flags
CF - carry flag, when theres an unsigned overflow, inc doesnt change this
PF - parity flag, 1 if even num of bits i.e xnor, not really used anymore
AF - aux carry flag, have due to back compat, overflow on low 4 bits of result
ZF - zero flag, when result is 0
SF - sign flag, 1 is neg 0 is pos
TF - trap flag, allows debuggers to step through code
IF - interrupt flag, allows interrupts to be called
DF - direction flag, 0 counting up in ram, 1 counting down in ram, for string instr. NOTE: UP in msvc
OF - overflow flag, signed overflow, overflow on 2nd highest msb, inc does change this
IOPL - shows IO port privilege level
NT - nested stask, shows if this task is nested
CPUID - if you can toggle bit 21, then the cpu is capable of the cpuid instr
pushfq ; push the rflags reg onto the stack
; you can then store it in rax with:
pop rax
; you can then change rax however you want
; then you can get the value back to the rflags reg with:
push rax ; put our changed flags on the stack
popfq ; take off the stack and put into the flags reg

NOTE: An overflow happens when you carry from the second highest bit to the highest bit of a signed integer, for example from bit 6 to bit 7 in a byte.
Adding 3 to 126 will result in an overflow.. instead of the expected result of 129, you will get -127 (10000001).

/**************************************
 * ep10 conditional jump mov byteset
 *************************************/
bascially they move,jump,set if true nothing otherwise
jump versions: (NOTE there are mov and set versions of these as well)
NOTE: cmov's will clear the upper part of 64bit regs
NOTE: signed uses equal/not equal and unsigned uses above/below.
jo - overflow
jno - not overflow
jb/jc/jnae - carry unsigned
jnb/jnc/jae - not carry unsigned
je/jz - zero
jne/jnz - not zero
jbe/jna - blow or equal unsigned
jnbe/ja - above signed
js - sign
jns - not sign
jp/jpe - parity even (even num 1s)
jnp/jpo - parity odd (odd num 1s)
jl/jnge - less signed
jnl/jge - not less signed
jle/jng - not greater signed
jnle/jg - greater signed

/**************************************
 * ep11 conditional jump mov byteset
 *************************************/
div reg/mem
NOTE: other operand implied, example: 50 / 10 would be
mov ax, 50
mov cl, 10
div cl ; ax
; byte divide result al, remainder ah
NOTE:
; 16 bit divide result ax, remainder dx
; 32 bit result eax, remainder edx
; 64 bit result rax, remainder rdx


/**************************************
 * ep12 param passing in Windows C calling convention
 *************************************/
       int    float/    ptr/obj/array
              double

1st    rcx    xmm0      rcx
2nd    rdx    xmm1      rdx
3rd    r8     xmm2      r8
4th    r9     xmm3      r9
more   stack  stack     stack

int and ptr returns are in rax
floating point returns are in xmm0

to return a byte: put in al
to return a short: put in ax
to return a i32: put in eax

/**************************************
 * ep13 Control Structures
 *************************************/
 if, while, do while, for
 all of these are just using some comparison like `cmp reg, reg`
 and some jump like jg Label(jump to Label if greater)
 jumps are costly so it will guess if it needs to take it
 and if it didn't actually have to take it it has to flush the pipeline.
 spectre and meltdown hw exploits were related to this since
 speculative code execution did not do any saftey checks to see if it was allowed to
 jump to those speculative instructions.

 for compound if statements just cmov into various registers and AND or OR them
 (whatever the operation is) together then finally do the jump call


/**************************************
 * ep14 Control Structures
 *************************************/
masm has some functionality for structures
you do it like so. This goes in the .data segment
Point struct
  ; ? means dont init
  x dd ?
  y dd ?
Point ends

myPoint Point { 0, 0 }
look in asm.asm and main for Point example.
the structure must be defined in cpp land and asm land
you need to know about how c aligns its struct members
basically the member must fall on its natural alignment
if you want the struct to small as possible,
generally you want to sort the members by size from largest to smallest.
for example:
struct MyStruct
{
    char c;   // offset 0
    int i;    // offset 4
    short s;  // offset 8
    double d; // offset 16
};            // total of 24 bytes

If you leave the cpp land struct like this you will need to pad your asm shadowing struct:
MyStruct struct
    c db ?
    db 3 dup(0) ; padding of 3 bytes assigned to 0
    i dd ?
    s dw ?
    db 6 dup(0) ; padding of 6 bytes assigned to 0
    d real8 ?
MyStruct ends

You can avoid this if you use:
#pragma pack(1) // this means align data to addresses divisible by 1, so members can land anywhere
So this puts your cpp land members back to back without natural padding

in asm land you can supply defaults
Point struct
  x dd 100
  y dd 100
Point ends

p1 Point {} ; use defaults
p2 Point { , 99 } ; x 100 y 99

UNIONS=======================
cpp land
union MyUnion
{
    char c;
    short s;
    int i;
    long long ll;
};

asm land:
MyUnion union
    c db ?
    s dw ?
    i dd ?
    ll dq ?
MyUnion ends ; yes its ends not endu

NOTE: you can nest structures too:
Point struct
    x real4 ?
    y real4 ?
Point ends

Line struct
    start Point { 0.0, 0.0 }
    end Point {}
Line ends

line1 Line {}
line2 Line { \ ; NOTE: slashes required for multiple lines
 { 100.0, 89.0 }, \
 { 25.0, 78.0 } \
}



/**************************************
 * ep15 SIMD
 *************************************/
SIMD instr sets:
SSE, AVX, AVX512, MMX

SSE2 allowed double precision ints and floats
SSE3 allowed horizontal ops
SSE4 allowed more horizontal ops, strings, blends, etc.
AVX 256 bits, for floats
AVX2 added more int ops
AVX512 512 bits
MMX integers old, obselete

REGISTERS:
mmx had 8 regs mm0-7
sse had 16 regs xmm0-15
avx had 16 regs ymm0-15
avx512 had 32 regs zmm0-31
for avx512 you get the register aliasing similar to normal asm programming
i.e.
| zmm0      | ymm0 | xmm0 |
| zmm1      | ymm1 | xmm1 |
...

in sse you get 128 bit regs, the xmm regs
and you can view the bits as any of the data types:
2 doubles, 4 floats, 2 qwords, 4 dwords, 8 words, 16 bytes

in avx has 256 bit regs, the ymm regs
so you can do double of all the above

in avx512 has 512 bit regs, the zmm regs
so you can do double the ops of avx and 4x the ops of sse

see main.cpp for some sse/avx intrinsics
see testSIMD in asm for simd asm

/**************************************
 * ep16 SIMD
 *************************************/
 see testSIMD in asm.asm and main.cpp for notes
 asm pneumonic:
 {v}[add/sub/mul/div][p/s][s/d]
 v - used for 256/512 bit avx
 p/s - scalar or packed
 s/d - singles or doubles
 ex:
 vaddss - 256 bit regs (ymm) add scalar single
 subpd - 128 bit regs (xmm) sub packed doubles

/**************************************
 * avx512 ep1
 *************************************/
 new regs are zmm0-31
 you also get 32 versions of xmm and ymm regs as well
 and they alias to the lower parts of the zmm regs

k mask regs k0-7
automatic broadcast to regs, you can broadcast and read automatically
you can control the rounding mode in the instruction
modes are nearest, up, down, toward 0
compressed displacement - displacements() that are multiples of the vector size
can be stored in the machine code as a byte, rather than a 32 bit displacement.

cpuid is stored on ebx and the various bits indicate support i think
------------------
F foundation instructions (EBX:16)
512 bit versions of older instructions
k mask, broadcasting rounding control
------------------
CD conflict detection (EBX:28)
detect dups, packed leading zero counts for dwords and qwords
k mask broadcasting to vectors
------------------
ER exp and reciprocals (EBX:27)
fast approx for exp and recip
accuracy is 2^-28, much better than sse
--------------------
PF prefetch (EBX:26)
prefetching sparse data from RAM
-------------------
VL vector length extensions (EBX:31)
expands avx512 functionality (above stuff)
to 128 and 256 versions
------------------------
DQ doulbe and quadword (EBX:17)
new instr for dwords and qwords.
shifts, bitwise instr and many for masks
------------------------
BW bytes and words (EBX:30)
new instr for dwords and qwords.
shifts, bitwise instr and many for masks
------------------------
IFMA Fused mult and add (EBX:21)
mult 52 bit ints, producing 104 bit temp result.
then they add the 52 bits to the dest based on k mask reg
---------------------------
VBMI vector bit manip (ECX:1)
bit manip. includes permutes and byte selection
---------------------------
4VNNIW neural net inst for words (EDX:2)
instr for neural nets using words.
basically dot prod with high precision
intermediate results and saturation
---------------------------
4FMAPS fused mult add (EDX:3)
floating point fmadd
---------------------------
VPOPCNTDQ vector pop count (EDX:14)
vector versions of pop count (count the 1s in the elements)
---------------------------
VNNI vector neural net instr (ECX:11)
vector mult and adds for bytes and words for neural nets
---------------------------
VBMI2 vector bit manip 2 (ECX:6)
sparse store and loads, some concat and shift
---------------------------
BITALG bit algos (ECX:12)
some more pop counts, and a shuffle instr for masks.
---------------------------
VP2INTERSECT vector pair intersection (EDX:8)
not well documented.
stores locations of matching pairs of elements in mask regs

/**************************************
 * avx512 ep2
 *************************************/
 avx512 programming can be done easily readably with agner fogs
 vector class library: https://github.com/vectorclass/version2
 dont use k0 since its reserved

 to use k masks in asm you can do:
 ; kmov is move to k mask reg. b is byte, d is dword, etc
 mov eax, 01010101b
 kmovb k1, eax
 ; this operation has 8 ops so it uses the bits  of the lsb byte
 ; in our k mask to do the operation masking.
 ; channels with a 1 get updated and this is the syntax to use the kmask reg to
 ; update the result:
 vaddpd zmm0{k1}, zmm0, zmm1
 ; also you can add decorations on k masks
 ; z means zero the result where ther are zeros
 vaddpd zmm0{k1}{z}, zmm0, zmm1

 ; to broadcast you can copy 1 scalar to all elements of an avx512 vector
 lea rax, myDouble; if myDouble is a real8 in the .data section
 vaddpd zmm0, zmm0, real8 bcst [rax] ;

 compressed displacement is used when doing sib addressing
 i.e. scaled index base. If the scaled index part is a multple of the vector size
 (size of teh avx reg you are using, ymm's are 32 bytes, zmm's are 64 bytes)
 then it can compress the offset to use up only 1 byte in the instr instead of 4.
 common when doing loop unrolling, ex:
 vaddpd zmm0, zmm0, zmmword ptr[ rcx + 64*0 ]
 vaddpd zmm1, zmm1, zmmword ptr[ rcx + 64*1 ]
 vaddpd zmm2, zmm2, zmmword ptr[ rcx + 64*2 ]
 vaddpd zmm3, zmm3, zmmword ptr[ rcx + 64*3 ]
 so when the 64*x parts get encoded into the avx512 instr they only take up 1 byte
 instead of 4 since they are all multples of 64 which is the alignment of the zmm regs
